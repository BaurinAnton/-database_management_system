#pragma once

#include <iostream>
#include <vector>

using namespace std;

/*!
	\brief Класс звена списка.

	В данном классе реализована структура звена (элемента) списка.
	В нем присутствуют приватные поля:
	1. int dataItem - значение звена (элемента) списка
	2. Node *nextItem - указатель типа Node на следующее звено (элемента) списка
*/

class Node 
{
	int dataItem;
	Node *nextItem;
	friend class List;
public:
	Node(int dataItem, Node *nextItem)
	{
		this->nextItem = nextItem;
		this->dataItem = dataItem;
	}
};

/*!
	\brief Класс реализации списка.

	В данном классе описана реализация циклического односвязного списка.
	В нем присутствуют приватные поля:
	1. Node *Head, *Tail - указатели типа Node на первое звено (элемента) списка,
	на последнее звено (элемента) списка.
	2. size_t sizeList - значение типа size_t количества звеньев (элементов) списка.
	Методы, взаимодействующие с циклическим односвязным списком.
*/

class List
{
	Node *head;
	Node *tail;
	size_t sizeList;

	/*!
	 \brief Приватный метод получения элементов списка.
	 \return Вектор элементов списка

	 Приватный метод получения элементов списка циклического односвязного списка.
	 Его предназначение - дальнейшее использование в переопределении 
	 оператора сдвига <<.
	*/

	const vector<int> getList();

	/*!
	 \brief Переопределение оператора <<.
	 \param[in] ostream& shift - ссылка на объект ostream.
	 \param[in] ostream& shift - ссылка на объект List.

	 Переопределение оператора сдвига << для класса List.
	*/

	friend ostream& operator<< (ostream& shift, List& pointList);

	/*!
	 \brief Запрет конструктора копирования.
	 \param[in] const List& - ссылка на List
	*/

	List(const List&) = delete;

	/*!
	 \brief Запрет оператора присваивания копирования.
	 \param[in] const List& - ссылка на List
	*/

	List& operator=(const List&) = delete;

	/*!
	 \brief Запрет конструктора перемещения.
	 \param[in] const List&& - ссылка на List
	*/

	List(List&&) = delete;

	/*!
	 \brief Запрет оператора присваивания перемещения.
	 \param[in] const List&& - ссылка на List
	*/

	List& operator=(const List&&) = delete;

public:

	/*!
	 \brief Конструктор по умолчанию.

	 В данном конструкторе присваиваются указателям 
	 Head (начало списка) и Tail (конец списка) nullptr (нулевые значения).
	*/

	List() :head(nullptr), tail(nullptr), sizeList(0) {};

	/*!
	 \brief Деструктор.

	 В деструкторе присваиваются указателям элементам списка nullptr (нулевые значения)
	 и освобождается память.
	*/

	~List();

	/*!
	 \brief Метод класса добавления элемента в список.
	 \param[in] const int dataItem - значение, 
	 которое будет хранить добавленный элемент в циклический односвязный список.

	 Метод класса добавления элемента в список.
	 В данном методе учтены ситуации, когда:
	 1. В списке нет элементов.
	 2. В списке присутствуют элементы.
	*/

	void addItem(const int dataItem);

	/*!
	 \brief Метод вывода данных из определенного элемента списка.
	 \return item - Переменная типа int данные элемента списка

	 Метод класса вывода данных из определенного 
	 элемета циклического односвязного списка.
	*/

	int readItem(const int numberItem);

	/*!
	 \brief Метод вывода количества элементов списка.
	 \return sizeList - Переменная типа size_t количества элементов списка

	 Метод класса вывода количества элеметов циклического односвязного списка.
	*/

	const size_t size();

	/*!
	 \brief Метод класса изменения значения элемента списка.
	 \param[in] const size_t numberItem - номер элемента, подверженному изменению.
	 \param[in] const int setDataItem - значение элемента, подверженному изменению.

	 Метод класса изменения значения элемента циклического односвязного списка.
	*/

	void updateItem(const size_t numberItem, const int setDataItem);

	/*!
	 \brief Метод класса поиска элемента списка.
	 \param[in] const size_t searchItem - значение элемента, подверженному поиску,
	 введеный с клавиатуры.
	 \param[in] vector<int> &setSearch - Контейнер последовательности,
	 в котором после работы метода будут храниться найденные элементы (их номер в списке).

	 Метод класса поиска элемента циклического односвязного списка.
	*/

	const vector<int> searchItem(const size_t searchItem);

	/*!
	 \brief Метод класса удаления элемента списка.
	 \param[in] const size_t numberItem - номер элемента, подверженному удалению,
	 введеный с клавиатуры.

	 Метод класса удаления элемента циклического односвязного списка.
	 В данном методе учтены ситуации, когда:
	 1. Требуется удалить единственный элемент в списке.
	 2. Требуется удалить элемент любого номера из списка.
	 3. Требуется удалить последний элемент из списка.
	 Корректное исполнения очищения памяти и обнуления указателей.
	*/

	void deleteItem(const size_t numberItem);
};

