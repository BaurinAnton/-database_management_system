#pragma once

#include <iostream>
#include <vector>

using namespace std;

/*!
	\brief Класс звена списка.

	В данном классе реализована структура звена (элемента) списка.
	В нем присутствуют приватные поля:
	1. int dataItem - значение звена (элемента) списка
	2. Node *nextItem - указатель типа Node на следующее звено (элемента) списка
*/

class Node 
{
	int dataItem;
	Node *nextItem;
	friend class List;
};

/*!
	\brief Класс реализации списка.

	В данном классе описана реализация циклического односвязного списка.
	В нем присутствуют приватные поля:
	1. Node *Head, *Tail - указатели типа Node на первое звено (элемента) списка,
	на последнее звено (элемента) списка.
	2. size_t sizeList - значение типа size_t количества звеньев (элементов) списка.
	Методы, взаимодействующие с циклическим односвязным списком.
*/

class List
{
	Node *Head, *Tail;
	size_t sizeList;
public:

	/*!
	 \brief Конструктор по умолчанию.

	 В данном конструкторе присваиваются указателям 
	 Head (начало списка) и Tail (конец списка) nullptr (нулевые значения).
	*/

	List() :Head(nullptr), Tail(nullptr), sizeList(0) {};

	/*!
	 \brief Деструктор.

	 В деструкторе присваиваются указателям элементам списка nullptr (нулевые значения)
	 и освобождается память.
	*/

	~List();

	/*!
	 \brief Метод класса добавления элемента в список.
	 \param[in] const int dataItem - значение, 
	 которое будет хранить добавленный элемент в циклический односвязный список.

	 Метод класса добавления элемента в список.
	 В данном методе учтены ситуации, когда:
	 1. В списке нет элементов.
	 2. В списке присутствуют элементы.
	*/

	void addItem(const int dataItem);

	/*!
	 \brief Метод класса чтения списка.

	 Метод класса чтения циклического односвязного списка.
	 В данном методе учтены ситуации, когда:
	 1. В списке нет элементов.
	 2. В списке присутствуют элементы.
	*/

	void read();

	/*!
	 \brief Метод вывода количества элементов списка.
	 \return sizeList - Переменная типа size_t количества элементов списка

	 Метод класса вывода количества элеметов циклического односвязного списка.
	*/

	size_t size();

	/*!
	 \brief Метод класса изменения значения элемента списка.
	 \param[in] const size_t numberItem - номер элемента, подверженному изменению,
	 введеный с клавиатуры.
	 \param[in] const int setDataItem - значение элемента, подверженному изменению,
	 введеный с клавиатуры.

	 Метод класса изменения значения элемента циклического односвязного списка.
	*/

	void updateItem(const size_t numberItem, const int setDataItem);

	/*!
	 \brief Метод класса поиска элемента списка.
	 \param[in] const size_t searchItem - значение элемента, подверженному поиску,
	 введеный с клавиатуры.
	 \param[in] vector<int> &setSearch - Контейнер последовательности,
	 в котором после работы метода будут храниться найденные элементы (их номер в списке).

	 Метод класса поиска элемента циклического односвязного списка.
	*/

	void searchItem(const size_t searchItem, vector<int> &setSearch);

	/*!
	 \brief Метод класса удаления элемента списка.
	 \param[in] const size_t numberItem - номер элемента, подверженному удалению,
	 введеный с клавиатуры.

	 Метод класса удаления элемента циклического односвязного списка.
	 В данном методе учтены ситуации, когда:
	 1. Требуется удалить единственный элемент в списке.
	 2. Требуется удалить элемент любого номера из списка.
	 3. Требуется удалить последний элемент из списка.
	 Корректное исполнения очищения памяти и обнуления указателей.
	*/

	void deleteItem(const size_t numberItem);

	/*!
	 \brief Метод класса собственного итератора списка.

	 Метод класса собственного итератора циклического односвязного списка.
	 Данный итератор перебирает элементы в контейнере стандартной библиотеки С++ - Vector
	 и предоставляет доступ к отдельным элементам.
	 Для демонстрации собственного итератора был создан цикл, который выводит в консоль
	 разыменованные указатели элементов списка.
	*/

	void iteratorItem();
};

